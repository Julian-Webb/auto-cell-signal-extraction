###### Timing the Code ######

### high_res_test_stack ###
image dimensions: 2048 x 1536
frames          : 13

With
roi_width = roi_height = 8 pixels
it takes about 300s = 5min to execute (when using Fiji for ROI signals and not calculating distance matrix)


### calcium image ###
image dimensions: 2048 x 1536
frames          : 2776

With
roi_width = roi_height = 16 pixels
it already takes ~30min for FIJI to compute ROI signals

With
roi_width = roi_height = 32 pixels
It takes about 300s = 5min to execute (when using Fiji for ROI signals and not calculating distance matrix)


#### Without using Fiji & without distance-adjusted similarity matrix:######
high_res_test_stack
    For 8 x 8 pixels, it takes 73s to execute

    For 4 x 4 pixels, it takes 7min to get the ROI signals.
        the clustering process gets killed (9:SIGKILL) -> probably due to excessive memory usage

calcium image
    For 16 x 16 pixels:
        get_roi_signals: 20s
        computing clusters: 65s
        total: ~100s

    For 8 x 8 pixels:
        get_roi_signals: 40s
            saving roi signals to csv takes very long -> this can be turned off
        computing clusters -> doesn't finish after >10 min

###### Using custom ROI distance matrix ########
test_stack
    128 pixels -> distance matrix takes 1s
     64 pixels -> 22s
     32 pixels ->

##### Only comparing within adjacency #####
D_276_AZD3965_Mathieu
    using my cosine similarity
        timing of distance matrix
            128 px ->   0.2 s
             64 px ->   2.3 s
             32 px ->  16.4 s
             16 px -> 126.4 s

    using scipy.spatial.distance.cosine
             32 px ->  12.0 s
             16 px ->  89.0 s


##### using scipy.spatial.distance.pdist #####
high_res_test_stack
    timing of distance matrix
          8 px ->  3.2 s
          4 px -> it fails to get the ROI signals

    total time
         16 px ->  2.2 s
          8 px -> 16.6 s

D_276_AZD3965_Mathieu
    timing of distance matrix
         32 px ->  4.2 s
         16 px -> 28.3 s (~25s for distance vector)
          8 px -> doesn't compute distance vector after >120s (scipy)
          8 px -> 1.9 s (sklearn)

    total time
         32 px ->
         16 px -> 31.8 s
          8 px ->  s

##### using sklearn pairwise_distances #####
D_276_AZD3965_Mathieu
    16 px ->  3.8 s (distance matrix)
    16 px -> 28.5 s (total)
     8 px -> 24.1 s (distance matrix)
     8 px -> 97.6 s (total)

